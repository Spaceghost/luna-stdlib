import Std.Base


class HttpMethod:
    POST
    GET
    PUT
    DELETE

    def toText: case self of
        POST:   "POST"
        GET:    "GET"
        PUT:    "PUT"
        DELETE: "DELETE"


class HttpSimpleBody:
    values :: List (Tuple2 Text Text)

    def toText:
        self.values . map ((a, b): a + "=" + b) . makeText "&"

    def toBinary: self.toText.toBinary

    def addValue key val: HttpSimpleBody (Prepend (key, val) self.values)

def emptyHttpBody: HttpSimpleBody Empty


class HttpResponse:
    responseCode :: Int
    getChunk     :: Binary

    def toText:
        "HttpResponse { responseCode = " + self.responseCode + " }"

    def stream: streamFrom self.getChunk

    def body:
        chunks = self.stream.takeWhile (_.equals "".toBinary . not)
        chunks.fold "".toBinary (+)

    def text: self.body.toText

    def json: parseJSON self.body.toText


class HttpRequest:
    uri     :: Text
    method  :: HttpMethod
    headers :: Map Text Text
    auth    :: Maybe (Tuple2 Text Text)
    oauth1  :: Maybe (Tuple4 Text Text Text Text)
    params  :: List (Tuple2 Text (Maybe Text))
    body    :: Binary

    def toText:
        "HttpRequest {\n" +
        "    uri =     "  + self.uri            + ",\n" +
        "    method =  "  + self.method.toText  + ",\n" +
        "    headers = "  + self.headers.toText + ",\n" +
        "    params =  "  + self.params.toText  + ",\n" +
        "    body =    "  + self.body.toText    + "\n"  +
        "}"

    def setMethod m: case self of
        HttpRequest uri _ headers auth oauth1 params body:
            HttpRequest uri m headers auth oauth1 params body

    def setBody b: case self of
        HttpRequest uri method headers auth oauth1 params _:
            HttpRequest uri method headers auth oauth1 params b.toBinary

    def setUri u: case self of
        HttpRequest _ method headers auth oauth1 params body:
            HttpRequest u method headers auth oauth1 params body

    def addHeader key val: case self of
        HttpRequest uri method _ auth oauth1 params body:
            HttpRequest uri method (headers.insert key val) auth oauth1 params body

    def setBasicAuth username password: case self of
        HttpRequest uri method headers _ oauth1 params body:
            HttpRequest uri method headers (Just (username, password)) oauth1 params body

    def setParam key val: case self of
        HttpRequest uri method headers auth oauth1 params body:
            HttpRequest uri method headers auth oauth1 (Prepend (key, val) params) body

    def setOAuth1 oauthData: case self of
        HttpRequest uri method headers auth _ params body:
            oauth = (oauthData.clientKey, oauthData.clientSecret, oauthData.oauthToken, oauthData.oauthTokenSecret)
            HttpRequest uri method headers auth (Just oauth) params body

    def setOAuth2 tkn:
        self . addHeader "Authorization" ("Bearer " + tkn)

    def perform: case self of
        HttpRequest uri method headers auth oauth1 params body:
            primPerformHttp uri method.toText headers.toList auth oauth1 params body


def defaultHttpRequest uri:
    HttpRequest uri GET Map.empty Nothing Nothing Empty "".toBinary


class Http:
    Http

    def get uri:
        defaultHttpRequest uri

    def post uri body:
        defaultHttpRequest uri . setMethod POST . setBody body

    def put uri body:
        defaultHttpRequest uri . setMethod PUT . setBody body

    def delete uri:
        defaultHttpRequest uri . setMethod DELETE

    def getBinary uri:
        Http.get uri . perform . body

    def getJSON uri:
        Http.get uri . perform . json
