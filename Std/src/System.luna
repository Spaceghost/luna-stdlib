import Std.Base

class PipeRequest:
    Inherit
    UseHandle: handle :: FileHandle
    CreatePipe
    NoStream

class BufferMode:
    NoBuffering
    LineBuffering
    BlockBuffering: size :: Maybe Int


native class FileHandle:
    def setBuffering bm: primHSetBuffering self bm
    def isOpen: primHIsOpen self
    def isClosed: primHIsClosed self
    def close: primHClose self
    def flush: primHFlush self
    def getContents: primHGetContents self
    def getLine: primHGetLine self
    def putText t: primHPutText self t
    def putLine t: primHPutText self (t + '\n')
    def toStream: streamFrom self.getLine

class ProcessHandle:
    def wait: primWaitForProcess self

class Process:
    stdin  :: Maybe FileHandle
    stdout :: Maybe FileHandle
    stderr :: Maybe FileHandle
    handle :: ProcessHandle

    def wait: self.handle . wait

class ProcessDescription:
    command :: Text
    args    :: List Text
    stdin   :: PipeRequest
    stdout  :: PipeRequest
    stderr  :: PipeRequest

    def setCommand command: case self of
        ProcessDescription _ args stdin stdout stderr input: ProcessDescription command args stdin stdout stderr input

    def setArgs args: case self of
        ProcessDescription command _ stdin stdout stderr input: ProcessDescription command args stdin stdout stderr input

    def setStdin stdin: case self of
        ProcessDescription command args _ stdout stderr input: ProcessDescription command args stdin stdout stderr input

    def setStdout stdout: case self of
        ProcessDescription command args stdin _ stderr input: ProcessDescription command args stdin stdout stderr input

    def setStderr stderr: case self of
        ProcessDescription command args stdin stdout _ input: ProcessDescription command args stdin stdout stderr input

    def run: primRunProcess self

class Command:
    command :: Text
    args    :: List Text

    def processDescription:
        ProcessDescription self.command self.args CreatePipe CreatePipe CreatePipe

    def run:
        self.processDescription.run

    def runWithInput input:
        p = self.run
        unless (t.isEmpty) (p.stdin.fromJust.putText t)
        p.stdin.each .close
        p

    def runWithStream stream:
        p = self.run
        fork (stream.each p.stdin.fromJust.putLine)
        p

    def execute input:
        p = self.run
        outh = p.stdout.fromJust.getContents
        errh = p.stderr.fromJust.getContents
        def action waitOut waitErr:
            unless input.isEmpty (p.stdin.fromJust.putText input)
            p.stdin.each .close
            o = waitOut
            e = waitErr
            (o, e)
        outErr = withForkWait (primEvaluate outh) (o: withForkWait (primEvaluate errh) (action o))
        ex = p.wait
        (outErr.first, outErr.second, ex)



def withForkWait async body:
    mVar = newMVar
    def fork':
        res = async
        mVar.put res
    fork fork'
    body mVar.take

class ExitCode:
    ExitSuccess
    ExitFailure: errorCode :: Int

    def toInt: case self of
        ExitSuccess: 0
        ExitFailure e: e

    def exitSuccess: case self of
        ExitSuccess: True
        ExitFailure e: False

    def exitFailure: case self of
        ExitFailure e: True
        ExitSuccess: False

    def toText: case self of
        ExitSuccess: "ExitSuccess"
        ExitFailure e: "ExitFailure " + e.toText

    def shortRep: self . toText
