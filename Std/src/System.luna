import Std.Base

class PipeRequest:
    Inherit
    UseHandle FileHandle
    CreatePipe
    NoStream

class FileHandle:
    def isOpen: primHIsOpen self
    def isClosed: primHIsClosed self
    def close: primHClose self
    def getContents: primHGetContents self
    def getLine: primHGetLine self
    def putText t: primHPutText self t

class ProcessHandle:
    def waitForProcess: primWaitForProcess self

class ProcessResults:
    ProcessResults (Maybe FileHandle) (Maybe FileHandle) (Maybe FileHandle) ProcessHandle

    def stdin: case self of
        ProcessResults hin _ _ _: hin

    def stdout: case self of
        ProcessResults _ hout _ _: hout

    def stderr: case self of
        ProcessResults _ _ herr _: herr

    def handle: case self of
        ProcessResults _ _ _ ph: ph

    def waitForProcess: case self of
        ProcessResults hin hout herr ph: ph . waitForProcess

class ProcessDescription:
    ProcessDescription Text (List Text) (Maybe PipeRequest) (Maybe PipeRequest) (Maybe PipeRequest)

    def run: primRunProcess self

def withForkWait async body:
    mVar = newMVar
    def fork' t:
        res = async
        mVar.put res
    fork (fork' "")
    body mVar.take


class Process:
    Process

    def readProcessWithExitCode path args input:
        cp = ProcessDescription path args (Just CreatePipe) (Just CreatePipe) (Just CreatePipe)
        pr = cp . run
        outh = pr . stdout . fromJust . getContents
        errh = pr . stderr . fromJust . getContents
        def action waitOut waitErr:
            unless (input . isEmpty) (pr . stdin . fromJust . putText input)
            pr . stdin . each .close
            o = waitOut
            e = waitErr
            (o, e)
        outErr = withForkWait (primEvaluate outh) (o: withForkWait (primEvaluate errh) (action o))
        ex = pr . waitForProcess
        (outErr . first, outErr . second, ex)


class ExitCode:
    ExitSuccess
    ExitFailure Int

    def toInt: case self of
        ExitSuccess: 0
        ExitFailure e: e

    def exitSuccess: case self of
        ExitSuccess: True
        ExitFailure e: False

    def exitFailure: case self of
        ExitFailure e: True
        ExitSuccess: False

    def toText: case self of
        ExitSuccess: "ExitSuccess"
        ExitFailure e: "ExitFailure " + e.toText

    def shortRep: self . toText
